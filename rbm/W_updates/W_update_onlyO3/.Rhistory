D <- diag(image.spectral$values)
P <- image.spectral$vectors
#A <- P %*%  D %*% t(P)
Atilde <- P[, 1:30]
Ytilde <- image.matrix %*% P
# Compression factor
size.full <- object.size(face6)
muhat <- colMeans(face6)
size.comp <- object.size(Ytilde) + object.size(Atilde) + object.size(muhat)
round(as.double(size.full / size.comp), 1)
Atilde <- P[, 1:30]
Ytilde <- image.matrix %*% P
# Compression factor
size.full <- object.size(face6)
muhat <- colMeans(face6)
size.comp <- object.size(Ytilde) + object.size(Atilde) + object.size(muhat)
round(as.double(size.full / size.comp), 5)
muhat <- colMeans(face6)
muhat.mat <- matrix(rep(muhat,243),byrow=T,nrow=243)
face6.c <- face6 - muhat.mat
## Performing PCA by hand
S <- cov(face6.c) # computation of the covariance matrix
Eig <- eigen(S) # eigendecomposition of the covariance matrix
A <- Eig$vectors # retrieving the rotation matrix (eigenvectors of S)
## Compression of the image using first 30 PCs
Atilde <- A[,1:30]
Ytilde <- face6.c %*% Atilde
## Computation of compression factor
size.full <- object.size(face6)
size.comp <- object.size(Ytilde) + object.size(Atilde) + object.size(muhat)
round(as.double(size.full / size.comp), 1)
image.matrix <- scale(face6, center = T, scale = F)    # Center the matrix
image.covariance <- cov(image.matrix)       # Compute covariance matrix
image.spectral <- eigen(image.covariance)   # Compute spectral decomposition (eigen values and vectors)
# Rotational matrix A = PDP_t
A <- image.spectral$vectors
Atilde <- A[, 1:30]
Ytilde <- image.matrix %*% Atilde
# Compression factor
size.full <- object.size(face6)
muhat <- colMeans(face6)
size.comp <- object.size(Ytilde) + object.size(Atilde) + object.size(muhat)
round(as.double(size.full / size.comp), 5)
Atilde <- A[, 1:30]
Ytilde <- image.matrix %*% Atilde
# Compression factor
size.full <- object.size(face6)
muhat <- colMeans(face6)
size.comp <- object.size(Ytilde) + object.size(Atilde) + object.size(muhat)
round(as.double(size.full / size.comp), 1)
muhat.mat <- matrix(rep(muhat,243),byrow=T,nrow=243)
image.recovered <- Ytilde %*% t(Atilde) + muhat.mat
image.recovered <- pmax(pmin(face6.recovered, 1), 0)  # make sure that the values are between 0 and 1
writePNG(image.recovered, "recoveredFace.png")
muhat.mat <- matrix(rep(muhat,243),byrow=T,nrow=243)
image.recovered <- Ytilde %*% t(Atilde) + muhat.mat
image.recovered <- pmax(pmin(image.recovered, 1), 0)  # make sure that the values are between 0 and 1
writePNG(image.recovered, "recoveredFace.png")
load(url("http://stat.ethz.ch/Teaching/Datasets/WBL/countries.rda"))
countries.rda
countries <- load(url("http://stat.ethz.ch/Teaching/Datasets/WBL/countries.rda"))
countries
head(countries)
countries <- load(url("http://stat.ethz.ch/Teaching/Datasets/WBL/countries.rda"))
View(mat)
?dist
dist(countries)
xs <- scale(countries)
countries <- load(url("http://stat.ethz.ch/Teaching/Datasets/WBL/countries.rda"))
xs <- scale(countries)
xs <- scale(as.numeric(countries))
countries <- load(url("http://stat.ethz.ch/Teaching/Datasets/WBL/countries.rda"))
summary(mat)
xs <- scale(countries)
xs <- scale(mat)
dist(xs)
mul.scl <- cmdscale(xs)
mul.scl <- cmdscale(eucl.dst)
eucl.dst <- dist(xs)
mul.scl <- cmdscale(eucl.dst)
?cmdscale
eigen(mul.scl)
mul.scl$eig
mul.scl <- cmdscale(eucl.dst)   # clasical multidimensional scaling
mul.scl$eig
mul.scl <- cmdscale(eucl.dst, eig = T)   # clasical multidimensional scaling
mul.scl$eig
cumsum(ev)
ev <- mul.scl$eig
cumsum(ev)
cumsum(ev)/sum(ev)
mul.scl <- cmdscale(eucl.dst, eig = T, k = 2)
plot(mul.scl)
plot(mul.scl$points)
mul.scl$points
points(mul.points[mul.points=="Switzerland"], col = "red")
mul.points <- mul.scl$points
plot(mul.points)
points(mul.points[mul.points=="Switzerland"], col = "red")
plot(mul.points[mul.points=="Switzerland"], col = "red")
mul.points[mul.points=="Switzerland"]
mul.points[mul.points=="Switzerland",]
mul.scl <- cmdscale(eucl.dst, eig = T, k = 2)
x <- mul.scl$points
mycol <- rep(1, 180); mycol[155] <- 2
plot(x[,1], x[,2], col = mycol)
plot(x[,1], x[,2], col = mycol, pch = 20)
?identify
identify(x[,1], x[,2])
identify(x[,1], x[,2])
identify(x[,1], x[,2], labels = rownames(x)))
identify(x[,1], x[,2], labels = rownames(x))
rownames(mat)[c(70,74,98)]
pc.res <- prcomp(xs)
plot(-pc.res$x[,1], -pc.res$x[,2], pch=20, xlab="-PC1", ylab="-PC2")
identify(x[,1], x[,2], labels = rownames(x))
mul.scl <- cmdscale(eucl.dst, eig = T, k = 2)
x <- mul.scl$points
mycol <- rep(1, 180); mycol[155] <- 2
plot(x[,1], x[,2], col = mycol, pch = 20)
identify(x[,1], x[,2], labels = rownames(x))
rownames(mat)[c(70,74,98)]
mul.scl <- cmdscale(eucl.dst, eig = T, k = 2)
x <- mul.scl$points
mycol <- rep(1, 180); mycol[155] <- 2
plot(x[,1], x[,2], col = mycol, pch = 20)
mul.scl <- cmdscale(eucl.dst, eig = T, k = 2)
x <- mul.scl$points
mycol <- rep(1, 180); mycol[155] <- 2
plot(x[,1], x[,2], col = mycol, pch = 20)
identify(x[,1], x[,2], labels = rownames(x))
library(mclust)
install.packages("mclust")
library(mclust)
# examples from help file:
precipMclust <- Mclust(precip)
plot(precipMclust)
precipMclust <- Mclust(precip)
plot(precipMclust)
faithfulMclust <- Mclust(faithful)
precipMclust <- Mclust(precip)
plot(precipMclust)
precipMclust <- Mclust(precip)
plot(precipMclust)
faithfulMclust <- Mclust(faithful)
plot(faithfulMclust)
# understand the output a little better:
?Mclust
?mclustModelNames
round(res$z, 8)
res$classification
round(res$uncertainty, 8)
res <- Mclust(iris[,1:4])
?Mclust
?mclustModelNames
round(res$z, 8)
res$classification
round(res$uncertainty, 8)
# what happens if we force 3 clusters?
res <- Mclust(iris[,1:4],G=3)
res
res$BIC
res$bic
round(res$z,3)
res$classification
round(res$uncertainty,3)
plot(res$uncertainty)
plot(res)
res <- Mclust(iris[,1:4],G=3)
res
res$BIC
res$bic
round(res$z,3)
res$classification
round(res$uncertainty,3)
plot(res$uncertainty)
plot(res)
?Mclust
?mclustModelNames
round(res$z, 8)
res$classification
round(res$uncertainty, 8)
res$classification
round(res$z, 8)
res <- Mclust(iris[,1:4])
?Mclust
?mclustModelNames
round(res$z, 8)
res <- Mclust(iris[,1:4],G=3)
res
res$BIC
res$bic
round(res$z,3)
res$classification
round(res$uncertainty,3)
res$BIC
res$bic  ## Top model
res$BIC  ## Top 3 models
res$bic  ## Top model
round(res$z,3)
res$classification
round(res$uncertainty,3)
round(res$uncertainty,3)   ## is small for all of them
plot(res$uncertainty)
plot(res)
attach(Tibet)
source("chap7tibetskull.dat")
#!/usr/bin/env Rscript
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
setwd("~/Desktop/GIT/FastNumericalCode/rbm/baseline")
#folder <- args[2]
# Set working directory to the folder with measuring data
library(ggplot2)
#setwd("~/Desktop/GIT/FastNumericalCode/rbm/update1")
#setwd(paste(current_dir, "/", folder, sep = ""))
y.axis.angle = 90
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
plot_perf <- function(name, n_koef, n_intercept){
cod <- read.table(name)             # Load table
n <- cod[,1]                        # Get n
cycles <- cod[,2]                   # Get cycles
flops <- n_koef * n + n_intercept   # Compute flops
perf <- flops / cycles              # Get performance
peak_performance <- 2               # Set peak performance
perf_proc <- perf/peak_performance * 100
# Plot
p <- qplot(n, perf_proc,
xlab = "Number of hidden layers",
ylab = "% of peak performance", geom = "path",
ylim = c(0, 100),
main = paste("Cycles: ", floor(cycles))) +
theme(axis.title.y = element_text(angle=y.axis.angle)) +
geom_hline(yintercept = 100, col = 2) +
annotate("text", label = "peak performance", x = 400, y = 95, size = 4, colour = "red") +
annotate("text", label = substring(name, 6), x = 600, y = max(perf_proc)+10, size = 4, colour = "black")
return(p)
}
# Open config file
config <- read.table("config")
#pdf(file='plot.pdf')
for(i in 1:nrow(config)){
name <- as.character(config[i, 1])
# Check if the row is commented
if (substring(name, 1, 1) == "#")
next
n_val <- as.numeric(config[i, 2])
intercept <- as.numeric(config[i, 3])
plot <- plot_perf(name, n_val, intercept)
#plots <- c(plot)
# Store plot
jpeg(paste("00", name, ".jpeg", sep = ""))
print(plot)
dev.off()
}
View(config)
View(config)
View(config)
args = commandArgs(trailingOnly=TRUE)
if (length(args)!=1) {
setwd("~/Desktop/GIT/FastNumericalCode/rbm/baseline")
} else {
current_dir <- args[1]
setwd(current_dir)
}
getwd()
#folder <- args[2]
# Set working directory to the folder with measuring data
library(ggplot2)
#setwd("~/Desktop/GIT/FastNumericalCode/rbm/update1")
#setwd(paste(current_dir, "/", folder, sep = ""))
y.axis.angle = 90
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
plot_perf <- function(name, n_koef, n_intercept){
cod <- read.table(name)             # Load table
n <- cod[,1]                        # Get n
cycles <- cod[,2]                   # Get cycles
flops <- n_koef * n + n_intercept   # Compute flops
perf <- flops / cycles              # Get performance
peak_performance <- 2               # Set peak performance
perf_proc <- perf/peak_performance * 100
# Plot
p <- qplot(n, perf_proc,
xlab = "Number of hidden layers",
ylab = "% of peak performance", geom = "path",
ylim = c(0, 100),
main = paste("Cycles: ", floor(cycles))) +
theme(axis.title.y = element_text(angle=y.axis.angle)) +
geom_hline(yintercept = 100, col = 2) +
annotate("text", label = "peak performance", x = 400, y = 95, size = 4, colour = "red") +
annotate("text", label = substring(name, 6), x = 600, y = max(perf_proc)+10, size = 4, colour = "black")
return(p)
}
# Open config file
config <- read.table("config")
View(config)
#pdf(file='plot.pdf')
for(i in 1:nrow(config)){
name <- as.character(config[i, 1])
# Check if the row is commented
if (substring(name, 1, 1) == "#")
next
n_val <- as.numeric(config[i, 2])
intercept <- as.numeric(config[i, 3])
plot <- plot_perf(name, n_val, intercept)
#plots <- c(plot)
# Store plot
jpeg(paste("00", name, ".jpeg", sep = ""))
print(plot)
dev.off()
}
config <- read.table("config")
View(config)
#pdf(file='plot.pdf')
for(i in 1:nrow(config)){
name <- as.character(config[i, 1])
# Check if the row is commented
if (substring(name, 1, 1) == "#")
next
n_val <- as.numeric(config[i, 2])
intercept <- as.numeric(config[i, 3])
plot <- plot_perf(name, n_val, intercept)
#plots <- c(plot)
# Store plot
jpeg(paste("00", name, ".jpeg", sep = ""))
print(plot)
dev.off()
}
#multiplot(plotlist = plots, col = 2)
#dev.off()
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
View(config)
a
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
View(config)
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
# Parse arguments
args = commandArgs(trailingOnly=TRUE)
if (length(args)!=1) {
setwd("~/Desktop/GIT/FastNumericalCode/rbm/baseline")
} else {
current_dir <- args[1]
setwd(current_dir)
}
#folder <- args[2]
# Set working directory to the folder with measuring data
library(ggplot2)
#setwd("~/Desktop/GIT/FastNumericalCode/rbm/update1")
#setwd(paste(current_dir, "/", folder, sep = ""))
y.axis.angle = 90
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
plot_perf <- function(name, n_koef, n_intercept){
cod <- read.table(name)             # Load table
n <- cod[,1]                        # Get n
cycles <- cod[,2]                   # Get cycles
flops <- n_koef * n + n_intercept   # Compute flops
perf <- flops / cycles              # Get performance
peak_performance <- 4               # Set peak performance
perf_proc <- perf/peak_performance * 100
# Plot
p <- qplot(n, perf_proc,
xlab = "Number of hidden layers",
ylab = "% of peak performance", geom = "path",
ylim = c(0, 100),
main = paste("Cycles: ", floor(cycles))) +
theme(axis.title.y = element_text(angle=y.axis.angle)) +
geom_hline(yintercept = 100, col = 2) +
annotate("text", label = "peak performance", x = 400, y = 95, size = 4, colour = "red") +
annotate("text", label = substring(name, 6), x = 600, y = max(perf_proc)+10, size = 4, colour = "black")
return(p)
}
# Open config file
config <- read.table("config")
View(config)
View(config)
config <- read.table("config")
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_benchmarks.R')
