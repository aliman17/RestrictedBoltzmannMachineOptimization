plot(glk, ylim = c(0, 200), main = 'Global optimal bandwidth')
plot(loc, ylim = c(0, 200), main = 'Local optimal bandwidth')
glk <- glkerns(x, y, x.out = x.out, is.rand=FALSE, hetero=FALSE)
loc <- lokerns(x, y, x.out = x.out, is.rand = F, hetero = F)
plot(x, y, ylim = c(0, 100))
lines(x.out, glk$est, col = 2)
lines(x.out, loc$est, col = 3)
legend("topright", ylt = c(2, 3), legend = c("global", "local"))
library(lokern)
x <- bmwlr[-length(bmwlr)]
x.out <- seq(-15,15,length = n)   # equidistant x values
glk <- glkerns(x, y, is.rand=FALSE, hetero=FALSE)
loc <- lokerns(x, y, is.rand = F, hetero = F)
par(mfrow = c(1, 1))
plot(glk, ylim = c(0, 200), main = 'Global optimal bandwidth')
plot(loc, ylim = c(0, 200), main = 'Local optimal bandwidth')
glk <- glkerns(x, y, x.out = x.out, is.rand=FALSE, hetero=FALSE)
loc <- lokerns(x, y, x.out = x.out, is.rand = F, hetero = F)
par(resetPar())
plot(x, y, ylim = c(0, 100))
lines(x.out, glk$est, col = 2)
lines(x.out, loc$est, col = 3)
legend("topright", col = c(2, 3), legend = c("global", "local"), lty = c(1,1), cex = 0.6)
library(lokern)
col
x <- bmwlr[-length(bmwlr)]
x.out <- seq(-15,15,length = n)   # equidistant x values
glk <- glkerns(x, y, x.out = x, is.rand=FALSE, hetero=FALSE)
loc <- lokerns(x, y, x.out = x, is.rand = F, hetero = F)
plot(x, y, ylim = c(0, 100))
lines(glk, col = 2)
lines(loc, col = 3)
legend("topright", col = c(2, 3), legend = c("global", "local"), lty = c(1,1), cex = 0.6)
par(mfrow = c(2,1))
plot.ts(y - lk.r$est[order(ox)],main = "Residuals: lokerns")
plot.ts(y - glk.r$est[order(ox)],main = "Residuals: glkerns")
par(mfrow = c(2,1))
plot.ts(y - loc$est[order(ox)],main = "Residuals: lokerns")
plot.ts(y - glk$est[order(ox)],main = "Residuals: glkerns")
par(mfrow = c(2,1))
plot.ts(y - loc$est,main = "Residuals: lokerns")
plot.ts(y - glk$est,main = "Residuals: glkerns")
par(mfrow = c(2,1))
plot.ts(y - loc$est,main = "Residuals: lokerns")
plot.ts(y - glk$est,main = "Residuals: glkerns")
par(mfrow = c(2,1))
plot.ts(y - loc$est,main = "Residuals: lokerns")
plot.ts(y - glk$est,main = "Residuals: glkerns")
par(mfrow = c(2,1))
plot.ts(y - loc$est[order(ox)],main = "Residuals: lokerns")
plot.ts(y - glk$est[order(ox)],main = "Residuals: glkerns")
par(mfrow = c(2,1))
plot.ts(y - loc$est[order(ox)],main = "Residuals: lokerns")
plot.ts(y - glk$est[order(ox)],main = "Residuals: glkerns")
par(mfrow = c(2,1))
plot.ts(y - loc$est[order(ox)],main = "Residuals: lokerns")
plot.ts(y - glk$est[order(ox)],main = "Residuals: glkerns")
loc$bandwidth
plot(x.out,loc$bandwidth, type = "l",main = "Local bandwidths of lokerns",ylab="Bandwidth")
abline(h=glk$bandwidth,col=2,lty=2)
legend("topright",legend = c("lokerns","glkerns"),
lty = c(1,2),col = c(1,2))
rug(x, col='grey') # to display the density of the data
plot(x,loc$bandwidth, type = "l",main = "Local bandwidths of lokerns",ylab="Bandwidth")
abline(h=glk$bandwidth,col=2,lty=2)
legend("topright",legend = c("lokerns","glkerns"),
lty = c(1,2),col = c(1,2))
rug(x, col='grey') # to display the density of the data
loc <- lokerns(x, y, x.out = x.out, is.rand = F, hetero = F)
plot(x.out,loc$bandwidth, type = "l",main = "Local bandwidths of lokerns",ylab="Bandwidth")
abline(h=glk$bandwidth,col=2,lty=2)
legend("topright",legend = c("lokerns","glkerns"),
lty = c(1,2),col = c(1,2))
rug(x, col='grey') # to display the density of the data
loc <- lokerns(x, y, x.out = x.out, is.rand = F, hetero = F)
par(mfrow = c(1,1))
plot(x.out,loc$bandwidth, type = "l",main = "Local bandwidths of lokerns",ylab="Bandwidth")
abline(h=glk$bandwidth,col=2,lty=2)
legend("topright",legend = c("lokerns","glkerns"),
lty = c(1,2),col = c(1,2))
rug(x, col='grey') # to display the density of the data
setwd("~/Desktop/GIT/FastNumericalCode/rbm/Performance\ Plots/")
getwd()
read.table("perf_cod_train")
cod <- read.table("perf_cod_train")
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
plot(n, cycles)
plot(n, cycles, type = 'l', col = "blue")
install.packages("ggplot2")
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, type = 'l', col = "blue")
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, col = "blue")
qplot(n, cycles)
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=32, hjust=0))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title.y = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=32, hjust=0))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title.y = element_text(hjust=0))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title.y = element_text(hjust=1))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title.y = element_text(hjust=2))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title.y = element_text(hjust=1))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title.y = element_text(hjust=1, angle=90))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title.y = element_text(angle=-90, hjust=1))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title.y = element_text(angle=0, hjust=1))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title.y = element_text(angle=0, hjust=0))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title.y = element_text(angle=0))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cyclesasdfasfas") +
theme(axis.title.y = element_text(angle=0))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles") +
theme(axis.title.y = element_text(angle=0))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles, xlab = "Number of hidden layers", ylab = "Cycles", geom = "path") +
theme(axis.title.y = element_text(angle=0))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles,
xlab = "Number of hidden layers",
ylab = "Cycles", geom = "path")
+ theme(axis.title.y = element_text(angle=0))
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
qplot(n, cycles,
xlab = "Number of hidden layers",
ylab = "Cycles", geom = "path") +
theme(axis.title.y = element_text(angle=0))
c(1,2,3) / c(1,2,3)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column, cycles in the second one
n <- cod[,1]
cycles <- cod[,2]
# Compute number of flops
flops <- 10308*n + 7117
# Performance
perf <- flops / cycles
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path") +
theme(axis.title.y = element_text(angle=0))
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column, cycles in the second one
n <- cod[,1]
cycles <- cod[,2]
# Compute number of flops
flops <- 10308*n + 7117
# Performance
perf <- flops / cycles
p <- qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path") +
theme(axis.title.y = element_text(angle=0))
p + geom_hline(yintercept = 2)
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2)
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
text(0, 0, "Text")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
text(300, 0, "Text")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
text("topright", "Text")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
text("topright", "Text")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
geom_text("Alasf")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
geom_text("Alasf")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
annotate("text", label = "plot mpg vs. wt", x = 200, y = 1.6, size = 8, colour = "red")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
annotate("text", label = "plot mpg vs. wt", x = 200, y = 1.8, size = 3, colour = "red")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
annotate("text", label = "plot mpg vs. wt", x = 250, y = 1.8, size = 4, colour = "red")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
annotate("text", label = "peak performance", x = 250, y = 1.8, size = 4, colour = "red")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
annotate("text", label = "peak performance", x = 280, y = 2, size = 4, colour = "red")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
annotate("text", label = "peak performance", x = 400, y = 1.9, size = 4, colour = "red")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
annotate("text", label = "peak performance", x = 400, y = 1.9, size = 4, colour = "red") +
annotate("text", label = "our algorithm performance", x = 400, y = 0.2, size = 4, colour = "black")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
annotate("text", label = "peak performance", x = 400, y = 1.9, size = 4, colour = "red") +
annotate("text", label = "our algorithm performance", x = 500, y = 0.2, size = 4, colour = "black")
qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path",
main = "Our Algorithm and Peak Performance") +
theme(axis.title.y = element_text(angle=0)) +
geom_hline(yintercept = 2, col = 2) +
annotate("text", label = "peak performance", x = 400, y = 1.9, size = 4, colour = "red") +
annotate("text", label = "our algorithm performance", x = 500, y = 0.1, size = 4, colour = "black")
library(ggplot2)
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column
n <- cod[,1]
# cycles
cycles <- cod[,2]
p1 <- qplot(n, cycles,
xlab = "Number of hidden layers",
ylab = "Cycles", geom = "path") +
theme(axis.title.y = element_text(angle=0)) +
qqtitle("Number of hidden layers")
# Set working directory to the folder with measuring data
setwd("~/Desktop/GIT/FastNumericalCode/rbm/Performance\ Plots/")
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
cod <- read.table("perf_cod_train")
# Increasing n is stored in the first column, cycles in the second one
n <- cod[,1]
cycles <- cod[,2]
# Compute number of flops
flops <- 10308*n + 7117
# Performance
perf <- flops / cycles
par(mfrow=c(2, 1))
p2 <- qplot(n, perf,
xlab = "Number of hidden layers",
ylab = "Performance", geom = "path") +
theme(axis.title.y = element_text(angle=y.axis.angle))+
annotate("text", label = "our algorithm performance", x = 500, y = 0.3, size = 4, colour = "black")
plot_perf <- function(name, n_koef, n_intercept){
cod <- read.table(name)             # Load table
n <- cod[,1]                        # Get n
cycles <- cod[,2]                   # Get cycles
flops <- n_koef * n + n_intercept   # Compute flops
perf <- flops / cycles              # Get performance
peak_performance <- 2               # Set peak performance
# Plot
p <- qplot(n, perf/peak_performance * 100,
xlab = "Number of hidden layers",
ylab = "% of peak performance", geom = "path") +
theme(axis.title.y = element_text(angle=y.axis.angle)) +
geom_hline(yintercept = 100, col = 2) +
annotate("text", label = "peak performance", x = 400, y = 90, size = 4, colour = "red") +
annotate("text", label = name, x = 600, y = 25, size = 4, colour = "black")
return(p)
}
plot_perf("perf_cod_train_update", 10308, 7117)
setwd("~/Desktop/GIT/FastNumericalCode/rbm/Performance\ Plots/")
y.axis.angle = 90
plot_perf <- function(name, n_koef, n_intercept){
cod <- read.table(name)             # Load table
n <- cod[,1]                        # Get n
cycles <- cod[,2]                   # Get cycles
flops <- n_koef * n + n_intercept   # Compute flops
perf <- flops / cycles              # Get performance
peak_performance <- 2               # Set peak performance
# Plot
p <- qplot(n, perf/peak_performance * 100,
xlab = "Number of hidden layers",
ylab = "% of peak performance", geom = "path") +
theme(axis.title.y = element_text(angle=y.axis.angle)) +
geom_hline(yintercept = 100, col = 2) +
annotate("text", label = "peak performance", x = 400, y = 90, size = 4, colour = "red") +
annotate("text", label = name, x = 600, y = 25, size = 4, colour = "black")
return(p)
}
plot_perf("perf_cod_train_update", 10308, 7117)
diabetes <- read.table("http://stat.ethz.ch/Teaching/Datasets/diabetes2.dat",
header = TRUE)
diabetes <- read.table("http://stat.ethz.ch/Teaching/Datasets/diabetes2.dat", header = TRUE)
reg <- diabetes[, c("Age", "C.Peptide")]
diabetes <- read.table("http://stat.ethz.ch/Teaching/Datasets/diabetes2.dat", header = TRUE)
diabetes <- read.table("http://stat.ethz.ch/Teaching/Datasets/diabetes2.dat", header = TRUE)
reg <- diabetes[, c("Age", "C.Peptide")]
names(reg) <- c("x", "y")
reg <- reg[sort.list(reg$x), ]
diabetes <- read.table("http://stat.ethz.ch/Teaching/Datasets/diabetes2.dat",
c
`zx
123
0
$
""
)
}
)
)(((
)))
)))
;Sldfkaj
reg <- reg[sort.list(reg$x), ]
reg <- diabetes[, c("Age", "C.Peptide")]
diabetes <- read.table("http://stat.ethz.ch/Teaching/Datasets/diabetes2.dat", header = TRUE)
reg <- diabetes[, c("Age", "C.Peptide")]
names(reg) <- c("x", "y")
q()
