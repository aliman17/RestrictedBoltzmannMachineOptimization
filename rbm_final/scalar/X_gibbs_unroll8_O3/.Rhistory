x2 <- rep(1:5, 5)
x3 <- rep(1:5, each = 5)
x2
x3
?quantile
?sample.int
?apply
replicate(5, sample.int(c(9,69,79,9,98,)))
replicate(5, sample.int(c(9,69,79,9,98), 5, replace = T))
replicate(2, sample.int(c(9,69,79,9,98), 5, replace = T))
?apply
a = replicate(2, sample.int(c(9,69,79,9,98), 5, replace = T))
apply(a, 1, sum)
apply(a, 2, sum)
B <- 25
b1 <- 1
b2 <- -2
b3 <- 3
Y <- b1 +b2*x2 + b3*x3
?norm
dataset1 <- Y + rnorm(length(Y), mean = 0, sd = 1)
dataset1
dataset2 <- Y + rexp(length(Y), rate = 3)
dataset2 <- Y + rt(length(Y))
dataset2 <- Y + rt(length(Y), df = 3)
dataset3 <- Y + rexp(length(Y), rate = 3) - 1/3
fit.params <- obst.est(dataset1, B)
# Make B bootstrap samples
obst.est <- function(data, B)
{
len <- nrow(data)
#Create matrix of indexes of dimension (B x len) where
#each colum corresponds to a bootstrap sample
# B samplings
# replicate binds columns!
samplings <- replicate(B, sample.int(data, len, replace = TRUE))
# For each sampling, get fitted parameters
# Use columns, because replicate binds columns
apply(samplings, 2, lmcoefs, data = data)  # each column is the result of one lmcoefs
}
obst.ci <- function(bst.pars, data, alpha)
{
## Estimate regression parameters without using bootstrap
reg.pars <- lmcoefs(data, 1:nrow(data))
## Calculate empirical quantiles of the bootstrap distribution
qt <- apply(bst.pars, 1, quantile, probs = c(1-alpha/2, alpha/2), names = FALSE)
## Return vector of bootstrap confidence intervals
## (cf. Formula (5.5) in the lecture notes)
2 * reg.pars - t(qt)
}
B <- 10
b1 <- 1
b2 <- -2
b3 <- 3
Y <- b1 +b2*x2 + b3*x3
# Dataset 1: e = N(0, 1)
dataset1 <- Y + rnorm(length(Y), mean = 0, sd = 1)
dataset2 <- Y + rt(length(Y), df = 3)
dataset3 <- Y + rexp(length(Y), rate = 3) - 1/3
fit.params <- obst.est(dataset1, B)
obst.ci(fit.params, dataset1, 0.1)
x2 <- rep(1:5, 5)
x3 <- rep(1:5, each = 5)
lmcoefs <- function(data, ind) {
d <- as.matrix(data)[ind,,drop=FALSE]
coef(lm.fit(cbind(1, d[,c("x2","x3")]), d[,"y"]))
}
B <- 10
b1 <- 1
b2 <- -2
b3 <- 3
Y <- b1 +b2*x2 + b3*x3
# Dataset 1: e = N(0, 1)
dataset1 <- Y + rnorm(length(Y), mean = 0, sd = 1)
dataset2 <- Y + rt(length(Y), df = 3)
dataset3 <- Y + rexp(length(Y), rate = 3) - 1/3
fit.params <- obst.est(dataset1, B)
obst.ci(fit.params, dataset1, 0.1)
dataset1 <- Y + rnorm(length(Y), mean = 0, sd = 1)
dataset2 <- Y + rt(length(Y), df = 3)
dataset3 <- Y + rexp(length(Y), rate = 3) - 1/3
fit.params <- obst.est(dataset1, B)
?sample.int
# Make B bootstrap samples
obst.est <- function(data, B)
{
len <- nrow(data)
#Create matrix of indexes of dimension (B x len) where
#each colum corresponds to a bootstrap sample
# B samplings
# replicate binds columns!
samplings <- replicate(B, sample.int(data, len, replace = TRUE))
# For each sampling, get fitted parameters
# Use columns, because replicate binds columns
apply(samplings, 2, lmcoefs, data = data)  # each column is the result of one lmcoefs
}
obst.ci <- function(bst.pars, data, alpha)
{
## Estimate regression parameters without using bootstrap
reg.pars <- lmcoefs(data, 1:nrow(data))
## Calculate empirical quantiles of the bootstrap distribution
qt <- apply(bst.pars, 1, quantile, probs = c(1-alpha/2, alpha/2), names = FALSE)
## Return vector of bootstrap confidence intervals
## (cf. Formula (5.5) in the lecture notes)
2 * reg.pars - t(qt)
}
B <- 10
b1 <- 1
b2 <- -2
b3 <- 3
Y <- b1 +b2*x2 + b3*x3
# Dataset 1: e = N(0, 1)
dataset1 <- Y + rnorm(length(Y), mean = 0, sd = 1)
dataset2 <- Y + rt(length(Y), df = 3)
dataset3 <- Y + rexp(length(Y), rate = 3) - 1/3
fit.params <- obst.est(dataset1, B)
obst.ci(fit.params, dataset1, 0.1)
dataset1
B <- 10
b1 <- 1
b2 <- -2
b3 <- 3
Y <- b1 +b2*x2 + b3*x3
# Dataset 1: e = N(0, 1)
dataset1 <- t (Y + rnorm(length(Y), mean = 0, sd = 1))
dataset2 <- t (Y + rt(length(Y), df = 3))
dataset3 <- t (Y + rexp(length(Y), rate = 3) - 1/3)
fit.params <- obst.est(dataset1, B)
obst.ci(fit.params, dataset1, 0.1)
# Make B bootstrap samples
obst.est <- function(data, B)
{
len <- length(data)
#Create matrix of indexes of dimension (B x len) where
#each colum corresponds to a bootstrap sample
# B samplings
# replicate binds columns!
samplings <- replicate(B, sample.int(data, len, replace = TRUE))
# For each sampling, get fitted parameters
# Use columns, because replicate binds columns
apply(samplings, 2, lmcoefs, data = data)  # each column is the result of one lmcoefs
}
obst.ci <- function(bst.pars, data, alpha)
{
## Estimate regression parameters without using bootstrap
reg.pars <- lmcoefs(data, 1:nrow(data))
## Calculate empirical quantiles of the bootstrap distribution
qt <- apply(bst.pars, 1, quantile, probs = c(1-alpha/2, alpha/2), names = FALSE)
## Return vector of bootstrap confidence intervals
## (cf. Formula (5.5) in the lecture notes)
2 * reg.pars - t(qt)
}
B <- 10
b1 <- 1
b2 <- -2
b3 <- 3
Y <- b1 +b2*x2 + b3*x3
# Dataset 1: e = N(0, 1)
dataset1 <- Y + rnorm(length(Y), mean = 0, sd = 1)
dataset2 <- Y + rt(length(Y), df = 3)
dataset3 <- Y + rexp(length(Y), rate = 3) - 1/3
fit.params <- obst.est(dataset1, B)
obst.ci(fit.params, dataset1, 0.1)
?dataframe
?data.frame
dataset1 <- data.frame(x2 = x2, x3 = x3, y = y1)
y1 <- Y + rnorm(length(Y), mean = 0, sd = 1)
y2 <- Y + rt(length(Y), df = 3)
y3 <- Y + rexp(length(Y), rate = 3) - 1/3
# Make B bootstrap samples
obst.est <- function(data, B)
{
len <- nrow(data)
#Create matrix of indexes of dimension (B x len) where
#each colum corresponds to a bootstrap sample
# B samplings
# replicate binds columns!
samplings <- replicate(B, sample.int(data, len, replace = TRUE))
# For each sampling, get fitted parameters
# Use columns, because replicate binds columns
apply(samplings, 2, lmcoefs, data = data)  # each column is the result of one lmcoefs
}
obst.ci <- function(bst.pars, data, alpha)
{
## Estimate regression parameters without using bootstrap
reg.pars <- lmcoefs(data, 1:nrow(data))
## Calculate empirical quantiles of the bootstrap distribution
qt <- apply(bst.pars, 1, quantile, probs = c(1-alpha/2, alpha/2), names = FALSE)
## Return vector of bootstrap confidence intervals
## (cf. Formula (5.5) in the lecture notes)
2 * reg.pars - t(qt)
}
# Dataset 1: e = N(0, 1)
y1 <- Y + rnorm(length(Y), mean = 0, sd = 1)
y2 <- Y + rt(length(Y), df = 3)
y3 <- Y + rexp(length(Y), rate = 3) - 1/3
dataset1 <- data.frame(x2 = x2, x3 = x3, y = y1)
dataset2 <- data.frame(x2 = x2, x3 = x3, y = y2)
dataset3 <- data.frame(x2 = x2, x3 = x3, y = y3)
fit.params <- obst.est(dataset1, B)
dataset1
fit.params <- obst.est(dataset1, B)
sample.int(dataset1, 5, replace = TRUE)
?sample.int
# Make B bootstrap samples
obst.est <- function(data, B)
{
len <- nrow(data)
#Create matrix of indexes of dimension (B x len) where
#each colum corresponds to a bootstrap sample
# B samplings
# replicate binds columns!
samplings <- replicate(B, sample(data, len, replace = TRUE))
# For each sampling, get fitted parameters
# Use columns, because replicate binds columns
apply(samplings, 2, lmcoefs, data = data)  # each column is the result of one lmcoefs
}
obst.ci <- function(bst.pars, data, alpha)
{
## Estimate regression parameters without using bootstrap
reg.pars <- lmcoefs(data, 1:nrow(data))
## Calculate empirical quantiles of the bootstrap distribution
qt <- apply(bst.pars, 1, quantile, probs = c(1-alpha/2, alpha/2), names = FALSE)
## Return vector of bootstrap confidence intervals
## (cf. Formula (5.5) in the lecture notes)
2 * reg.pars - t(qt)
}
fit.params <- obst.est(dataset1, B)
as.matrix(dataset1)
B <- 10
b1 <- 1
b2 <- -2
b3 <- 3
Y <- b1 +b2*x2 + b3*x3
# Dataset 1: e = N(0, 1)
y1 <- Y + rnorm(length(Y), mean = 0, sd = 1)
y2 <- Y + rt(length(Y), df = 3)
y3 <- Y + rexp(length(Y), rate = 3) - 1/3
dataset1 <- data.frame(x2 = x2, x3 = x3, y = y1)
dataset2 <- data.frame(x2 = x2, x3 = x3, y = y2)
dataset3 <- data.frame(x2 = x2, x3 = x3, y = y3)
fit.params <- obst.est(dataset1, B)
obst.ci(fit.params, dataset1, 0.1)
# Make B bootstrap samples
obst.est <- function(data, B)
{
len <- nrow(data)
#Create matrix of indexes of dimension (B x len) where
#each colum corresponds to a bootstrap sample
# B samplings
# replicate binds columns!
samplings <- replicate(B, sample(1:len, len, replace = TRUE))
# For each sampling, get fitted parameters
# Use columns, because replicate binds columns
apply(samplings, 2, lmcoefs, data = data)  # each column is the result of one lmcoefs
}
obst.ci <- function(bst.pars, data, alpha)
{
## Estimate regression parameters without using bootstrap
reg.pars <- lmcoefs(data, 1:nrow(data))
## Calculate empirical quantiles of the bootstrap distribution
qt <- apply(bst.pars, 1, quantile, probs = c(1-alpha/2, alpha/2), names = FALSE)
## Return vector of bootstrap confidence intervals
## (cf. Formula (5.5) in the lecture notes)
2 * reg.pars - t(qt)
}
fit.params <- obst.est(dataset1, B)
# Make B bootstrap samples
obst.est <- function(data, B)
{
len <- nrow(data)
#Create matrix of indexes of dimension (B x len) where
#each colum corresponds to a bootstrap sample
# B samplings
# replicate binds columns!
inds <- replicate(B, sample(1:len, len, replace = TRUE))
# For each sampling, get fitted parameters
# Use columns, because replicate binds columns
apply(inds, 2, lmcoefs, data = data)  # each column is the result of one lmcoefs
}
obst.ci <- function(bst.pars, data, alpha)
{
## Estimate regression parameters without using bootstrap
reg.pars <- lmcoefs(data, 1:nrow(data))
## Calculate empirical quantiles of the bootstrap distribution
qt <- apply(bst.pars, 1, quantile, probs = c(1-alpha/2, alpha/2), names = FALSE)
## Return vector of bootstrap confidence intervals
## (cf. Formula (5.5) in the lecture notes)
2 * reg.pars - t(qt)
}
fit.params <- obst.est(dataset1, B)
fit.params
obst.ci(fit.params, dataset1, 0.1)
qplot(1:800, 5)
library(ggplot2)
qplot(1:800, 5)
q <- qplot(1:800, 5)
q
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
source('~/Desktop/GIT/FastNumericalCode/rbm/plot_compare.R')
